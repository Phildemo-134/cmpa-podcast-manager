#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la conversion des fuseaux horaires
 * Ce script simule la planification d'un tweet √† 19:09 heure fran√ßaise
 * et v√©rifie qu'il est bien stock√© √† 17:09 en UTC
 */

// Configuration
const FRENCH_TIMEZONE_OFFSET = 2; // UTC+2 pour la France (heure d'√©t√©)
const TEST_DATE = '2024-12-31';
const TEST_TIME = '19:09';

console.log('üß™ Test de conversion des fuseaux horaires');
console.log('==========================================\n');

// Simuler la conversion c√¥t√© client (comme dans l'API)
function convertLocalToUTC(localDate, localTime) {
  // Cr√©er une date locale en sp√©cifiant explicitement le fuseau UTC+2
  // Quand on sp√©cifie +02:00, JavaScript traite cela comme "cette date est en UTC+2"
  // et la convertit automatiquement en UTC en soustrayant 2 heures
  // Donc 19:09 +02:00 devient 17:09 UTC, ce qui est exactement ce que nous voulons !
  const localDateTime = new Date(`${localDate}T${localTime}:00+02:00`);
  
  // Retourner l'ISO string (JavaScript a d√©j√† fait la conversion UTC)
  return localDateTime.toISOString();
}

// Simuler la conversion c√¥t√© serveur pour l'affichage
function convertUTCToLocal(utcDateTime) {
  const utcDate = new Date(utcDateTime);
  
  // Cr√©er une date locale en ajoutant 2 heures (UTC+2)
  const localDate = new Date(utcDate.getTime() + (FRENCH_TIMEZONE_OFFSET * 60 * 60 * 1000));
  
  // Extraire la date et l'heure en format local
  // Utiliser getUTCHours() pour √©viter les probl√®mes de fuseau horaire local
  const date = localDate.toISOString().split('T')[0];
  const time = `${localDate.getUTCHours().toString().padStart(2, '0')}:${localDate.getUTCMinutes().toString().padStart(2, '0')}`;
  
  return { date, time };
}

// Test 1: Conversion locale vers UTC
console.log('üìÖ Test 1: Conversion locale vers UTC');
console.log(`   Date locale: ${TEST_DATE}`);
console.log(`   Heure locale: ${TEST_TIME}`);
console.log(`   Fuseau: UTC+${FRENCH_TIMEZONE_OFFSET}`);

const utcDateTime = convertLocalToUTC(TEST_DATE, TEST_TIME);
const utcDate = new Date(utcDateTime);

console.log(`   UTC stock√©: ${utcDateTime}`);
console.log(`   Heure UTC: ${utcDate.getUTCHours().toString().padStart(2, '0')}:${utcDate.getUTCMinutes().toString().padStart(2, '0')}`);
console.log(`   Date UTC: ${utcDate.getUTCFullYear()}-${(utcDate.getUTCMonth() + 1).toString().padStart(2, '0')}-${utcDate.getUTCDate().toString().padStart(2, '0')}`);

// V√©rification
const expectedUTCHour = 19 - FRENCH_TIMEZONE_OFFSET; // 19 - 2 = 17
const actualUTCHour = utcDate.getUTCHours();

if (actualUTCHour === expectedUTCHour) {
  console.log(`   ‚úÖ SUCC√àS: Heure UTC ${actualUTCHour}:09 (attendu: ${expectedUTCHour}:09)`);
} else {
  console.log(`   ‚ùå √âCHEC: Heure UTC ${actualUTCHour}:09 (attendu: ${expectedUTCHour}:09)`);
}

console.log('');

// Test 2: Conversion UTC vers locale pour l'affichage
console.log('üìÖ Test 2: Conversion UTC vers locale pour l\'affichage');
console.log(`   UTC re√ßu: ${utcDateTime}`);

const localDisplay = convertUTCToLocal(utcDateTime);

console.log(`   Date affich√©e: ${localDisplay.date}`);
console.log(`   Heure affich√©e: ${localDisplay.time}`);

// V√©rification
if (localDisplay.date === TEST_DATE && localDisplay.time === TEST_TIME) {
  console.log(`   ‚úÖ SUCC√àS: Affichage correct ${localDisplay.date} ${localDisplay.time}`);
} else {
  console.log(`   ‚ùå √âCHEC: Affichage incorrect ${localDisplay.date} ${localDisplay.time} (attendu: ${TEST_DATE} ${TEST_TIME})`);
}

console.log('');

// Test 3: V√©rification de la coh√©rence
console.log('üìÖ Test 3: V√©rification de la coh√©rence');
console.log('   V√©rification que la conversion est bidirectionnelle...');

const roundTripUTC = convertLocalToUTC(localDisplay.date, localDisplay.time);
const roundTripLocal = convertUTCToLocal(roundTripUTC);

console.log(`   UTC apr√®s aller-retour: ${roundTripUTC}`);
console.log(`   Local apr√®s aller-retour: ${roundTripLocal.date} ${roundTripLocal.time}`);

if (roundTripLocal.date === TEST_DATE && roundTripLocal.time === TEST_TIME) {
  console.log(`   ‚úÖ SUCC√àS: Conversion bidirectionnelle coh√©rente`);
} else {
  console.log(`   ‚ùå √âCHEC: Conversion bidirectionnelle incoh√©rente`);
}

console.log('');

// Test 4: Cas limites
console.log('üìÖ Test 4: Cas limites');
console.log('   Test avec minuit (00:00)...');

const midnightUTC = convertLocalToUTC('2024-12-31', '00:00');
const midnightDate = new Date(midnightUTC);

console.log(`   Minuit local (00:00) ‚Üí UTC: ${midnightDate.getUTCHours().toString().padStart(2, '0')}:${midnightDate.getUTCMinutes().toString().padStart(2, '0')}`);

console.log('   Test avec 23:59...');

const lateUTC = convertLocalToUTC('2024-12-31', '23:59');
const lateDate = new Date(lateUTC);

console.log(`   23:59 local ‚Üí UTC: ${lateDate.getUTCHours().toString().padStart(2, '0')}:${lateDate.getUTCMinutes().toString().padStart(2, '0')}`);

console.log('');

// R√©sum√©
console.log('üìä R√©sum√© des tests');
console.log('===================');
console.log(`‚úÖ Conversion locale ‚Üí UTC: ${actualUTCHour === expectedUTCHour ? 'SUCC√àS' : '√âCHEC'}`);
console.log(`‚úÖ Conversion UTC ‚Üí locale: ${localDisplay.date === TEST_DATE && localDisplay.time === TEST_TIME ? 'SUCC√àS' : '√âCHEC'}`);
console.log(`‚úÖ Coh√©rence bidirectionnelle: ${roundTripLocal.date === TEST_DATE && roundTripLocal.time === TEST_TIME ? 'SUCC√àS' : '√âCHEC'}`);

console.log('\nüéØ Objectif atteint:');
console.log(`   Un tweet planifi√© √† ${TEST_TIME} heure fran√ßaise (UTC+${FRENCH_TIMEZONE_OFFSET})`);
console.log(`   sera stock√© √† ${actualUTCHour}:09 en UTC dans la base de donn√©es`);
console.log(`   et affich√© correctement √† ${TEST_TIME} pour l'utilisateur fran√ßais.`);
