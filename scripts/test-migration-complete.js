#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que la migration scheduled_date/scheduled_time ‚Üí scheduled_at est compl√®te
 * 
 * Usage: node scripts/test-migration-complete.js
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configuration Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

/**
 * Test 1: V√©rifier la structure de la base de donn√©es
 */
async function testDatabaseStructure() {
  console.log('üîç Test 1: V√©rification de la structure de la base de donn√©es')
  
  try {
    // V√©rifier que scheduled_at existe
    const { data: columns, error } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type')
      .eq('table_name', 'scheduled_tweets')
      .eq('table_schema', 'public')
    
    if (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la structure:', error)
      return false
    }
    
    const hasScheduledAt = columns.some(col => col.column_name === 'scheduled_at')
    const hasScheduledDate = columns.some(col => col.column_name === 'scheduled_date')
    const hasScheduledTime = columns.some(col => col.column_name === 'scheduled_time')
    
    console.log('   Colonnes trouv√©es:')
    columns.forEach(col => {
      console.log(`     - ${col.column_name}: ${col.data_type}`)
    })
    
    if (!hasScheduledAt) {
      console.error('‚ùå Colonne scheduled_at manquante')
      return false
    }
    
    if (hasScheduledDate || hasScheduledTime) {
      console.warn('‚ö†Ô∏è  Anciennes colonnes scheduled_date/scheduled_time encore pr√©sentes')
      console.warn('   Elles peuvent √™tre supprim√©es si elles ne sont plus utilis√©es')
    }
    
    console.log('‚úÖ Structure de la base de donn√©es OK')
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de structure:', error)
    return false
  }
}

/**
 * Test 2: Cr√©er un tweet de test avec scheduled_at
 */
async function testCreateTweet() {
  console.log('\nüîç Test 2: Cr√©ation d\'un tweet de test avec scheduled_at')
  
  try {
    // R√©cup√©rer un utilisateur
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('id')
      .limit(1)
    
    if (userError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur trouv√©')
      return false
    }
    
    const userId = users[0].id
    
    // Cr√©er un tweet de test
    const testTweet = {
      content: `Test migration ${Date.now()} - scheduled_at uniquement`,
      scheduled_at: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // Dans 10 minutes
      user_id: userId,
      status: 'pending'
    }
    
    const { data: tweet, error } = await supabase
      .from('scheduled_tweets')
      .insert(testTweet)
      .select()
      .single()
    
    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du tweet:', error)
      return false
    }
    
    console.log('‚úÖ Tweet cr√©√© avec succ√®s:')
    console.log(`   ID: ${tweet.id}`)
    console.log(`   Contenu: ${tweet.content}`)
    console.log(`   Planifi√© pour: ${new Date(tweet.scheduled_at).toLocaleString('fr-FR')}`)
    console.log(`   Statut: ${tweet.status}`)
    
    // Nettoyer le tweet de test
    await supabase
      .from('scheduled_tweets')
      .delete()
      .eq('id', tweet.id)
    
    console.log('‚úÖ Tweet de test supprim√©')
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de cr√©ation:', error)
    return false
  }
}

/**
 * Test 3: V√©rifier la r√©cup√©ration des tweets programm√©s
 */
async function testRetrieveTweets() {
  console.log('\nüîç Test 3: R√©cup√©ration des tweets programm√©s')
  
  try {
    // Cr√©er quelques tweets de test
    const { data: users } = await supabase
      .from('users')
      .select('id')
      .limit(1)
    
    if (!users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur trouv√©')
      return false
    }
    
    const userId = users[0].id
    const now = new Date()
    
    const testTweets = [
      {
        content: 'Tweet test 1 - pass√©',
        scheduled_at: new Date(now.getTime() - 60 * 1000).toISOString(), // 1 minute dans le pass√©
        user_id: userId,
        status: 'pending'
      },
      {
        content: 'Tweet test 2 - futur',
        scheduled_at: new Date(now.getTime() + 60 * 1000).toISOString(), // 1 minute dans le futur
        user_id: userId,
        status: 'pending'
      }
    ]
    
    // Ins√©rer les tweets de test
    const { data: insertedTweets, error: insertError } = await supabase
      .from('scheduled_tweets')
      .insert(testTweets)
      .select()
    
    if (insertError) {
      console.error('‚ùå Erreur lors de l\'insertion des tweets de test:', insertError)
      return false
    }
    
    console.log(`‚úÖ ${insertedTweets.length} tweets de test cr√©√©s`)
    
    // Tester la r√©cup√©ration des tweets √† publier (pass√©s)
    const { data: tweetsToPublish, error: fetchError } = await supabase
      .from('scheduled_tweets')
      .select('*')
      .eq('status', 'pending')
      .lte('scheduled_at', now.toISOString())
      .order('scheduled_at', { ascending: true })
    
    if (fetchError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des tweets √† publier:', fetchError)
      return false
    }
    
    console.log(`‚úÖ R√©cup√©ration des tweets √† publier: ${tweetsToPublish.length} trouv√©(s)`)
    tweetsToPublish.forEach(tweet => {
      console.log(`   - ${tweet.content} (${new Date(tweet.scheduled_at).toLocaleString('fr-FR')})`)
    })
    
    // Nettoyer les tweets de test
    const tweetIds = insertedTweets.map(t => t.id)
    await supabase
      .from('scheduled_tweets')
      .delete()
      .in('id', tweetIds)
    
    console.log('‚úÖ Tweets de test supprim√©s')
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de r√©cup√©ration:', error)
    return false
  }
}

/**
 * Test 4: V√©rifier la compatibilit√© avec l'API
 */
async function testAPICompatibility() {
  console.log('\nüîç Test 4: Test de compatibilit√© avec l\'API')
  
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/cron/publish-scheduled-tweets`)
    
    if (!response.ok) {
      console.error(`‚ùå Erreur API: ${response.status} ${response.statusText}`)
      return false
    }
    
    const data = await response.json()
    console.log('‚úÖ API cron accessible:', data.message)
    return true
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test API:', error.message)
    return false
  }
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üß™ Test de la Migration scheduled_date/scheduled_time ‚Üí scheduled_at')
  console.log('=' .repeat(70))
  
  try {
    // Test de connexion Supabase
    const { error: testError } = await supabase
      .from('scheduled_tweets')
      .select('count', { count: 'exact', head: true })
    
    if (testError) {
      console.error('‚ùå Erreur de connexion √† Supabase:', testError.message)
      console.error('V√©rifiez vos variables d\'environnement (.env.local)')
      process.exit(1)
    }
    
    console.log('‚úÖ Connexion √† Supabase √©tablie')
    
    // Ex√©cuter tous les tests
    const tests = [
      testDatabaseStructure,
      testCreateTweet,
      testRetrieveTweets,
      testAPICompatibility
    ]
    
    let passedTests = 0
    let totalTests = tests.length
    
    for (const test of tests) {
      try {
        const result = await test()
        if (result) passedTests++
      } catch (error) {
        console.error(`‚ùå Test a √©chou√© avec une erreur:`, error)
      }
    }
    
    console.log('\n' + '=' .repeat(70))
    console.log(`üéâ R√©sultats des tests: ${passedTests}/${totalTests} r√©ussis`)
    
    if (passedTests === totalTests) {
      console.log('‚úÖ Tous les tests sont pass√©s ! La migration est compl√®te et fonctionnelle.')
      process.exit(0)
    } else {
      console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.')
      process.exit(1)
    }
    
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error)
    process.exit(1)
  }
}

// D√©marrer le script
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { 
  testDatabaseStructure, 
  testCreateTweet, 
  testRetrieveTweets, 
  testAPICompatibility 
}
