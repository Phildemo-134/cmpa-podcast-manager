const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function testTweetGeneration() {
  try {
    console.log('üß™ Test de g√©n√©ration de tweets...')
    
    // R√©cup√©rer un √©pisode avec transcription
    const { data: episodes, error: episodesError } = await supabase
      .from('episodes')
      .select('id, title, status')
      .limit(1)
    
    if (episodesError) {
      throw episodesError
    }
    
    if (!episodes || episodes.length === 0) {
      console.log('‚ùå Aucun √©pisode trouv√©')
      return
    }
    
    const episode = episodes[0]
    console.log(`üì∫ √âpisode trouv√©: ${episode.title} (ID: ${episode.id})`)
    
    // V√©rifier s'il y a une transcription
    const { data: transcription, error: transcriptionError } = await supabase
      .from('transcriptions')
      .select('*')
      .eq('episode_id', episode.id)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()
    
    if (transcriptionError || !transcription) {
      console.log('‚ùå Aucune transcription trouv√©e pour cet √©pisode')
      return
    }
    
    if (transcription.processing_status !== 'completed') {
      console.log(`‚ùå Transcription non termin√©e (status: ${transcription.processing_status})`)
      return
    }
    
    console.log('‚úÖ Transcription trouv√©e et termin√©e')
    console.log(`üìù Longueur du transcript: ${transcription.transcript?.length || 0} caract√®res`)
    
    // Tester l'API de g√©n√©ration de tweets
    console.log('\nüöÄ Test de l\'API de g√©n√©ration de tweets...')
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/generate-tweets`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ episodeId: episode.id }),
    })
    
    if (!response.ok) {
      const errorData = await response.json()
      throw new Error(`Erreur API: ${response.status} - ${errorData.error || 'Erreur inconnue'}`)
    }
    
    const { tweets } = await response.json()
    
    console.log(`‚úÖ ${tweets.length} tweets g√©n√©r√©s avec succ√®s!`)
    
    // Afficher les premiers tweets
    tweets.slice(0, 3).forEach((tweet, index) => {
      console.log(`\nüì± Tweet ${index + 1}:`)
      console.log(`   Contenu: ${tweet.content}`)
      console.log(`   Hashtags: ${tweet.hashtags.join(', ')}`)
      console.log(`   Caract√®res: ${tweet.content.length}/200`)
    })
    
    if (tweets.length > 3) {
      console.log(`\n... et ${tweets.length - 3} autres tweets`)
    }
    
    // V√©rifier la limite de caract√®res
    const invalidTweets = tweets.filter(tweet => tweet.content.length > 200)
    if (invalidTweets.length > 0) {
      console.log(`\n‚ö†Ô∏è  ${invalidTweets.length} tweet(s) d√©passent la limite de 200 caract√®res`)
    } else {
      console.log('\n‚úÖ Tous les tweets respectent la limite de 200 caract√®res')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message)
  }
}

// Ex√©cuter le test
testTweetGeneration()
