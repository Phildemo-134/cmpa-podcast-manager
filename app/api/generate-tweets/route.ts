import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import Anthropic from '@anthropic-ai/sdk'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    // V√©rifier la configuration Anthropic
    if (!process.env.ANTHROPIC_API_KEY) {
      throw new Error('ANTHROPIC_API_KEY environment variable is required')
    }

    if (process.env.ANTHROPIC_API_KEY === 'your_anthropic_api_key' || process.env.ANTHROPIC_API_KEY === '') {
      throw new Error('ANTHROPIC_API_KEY is not properly configured. Please set a valid API key.')
    }

    const { episodeId } = await request.json()

    if (!episodeId) {
      return NextResponse.json(
        { error: 'ID de l\'√©pisode requis' },
        { status: 400 }
      )
    }

    console.log(`üéØ G√©n√©ration de tweets pour l'√©pisode: ${episodeId}`)

    // R√©cup√©rer l'√©pisode et sa transcription
    const { data: episode, error: episodeError } = await supabase
      .from('episodes')
      .select('*')
      .eq('id', episodeId)
      .single()

    if (episodeError || !episode) {
      return NextResponse.json(
        { error: '√âpisode non trouv√©' },
        { status: 404 }
      )
    }

    const { data: transcription, error: transcriptionError } = await supabase
      .from('transcriptions')
      .select('*')
      .eq('episode_id', episodeId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (transcriptionError || !transcription) {
      return NextResponse.json(
        { error: 'Transcription non trouv√©e' },
        { status: 404 }
      )
    }

    if (transcription.processing_status !== 'completed') {
      return NextResponse.json(
        { error: 'La transcription n\'est pas encore termin√©e' },
        { status: 400 }
      )
    }

    console.log(`üìù Transcription trouv√©e, statut: ${transcription.processing_status}`)

    // Pr√©parer le prompt pour Claude
    const prompt = `Tu es un expert en marketing digital et r√©seaux sociaux. Tu dois cr√©er entre 10 et 15 tweets pour promouvoir un √©pisode de podcast.

√âPISODE: ${episode.title}
DESCRIPTION: ${episode.description || 'Aucune description disponible'}

TRANSCRIPTION:
${transcription.raw_text || transcription.cleaned_text || 'Aucune transcription disponible'}

INSTRUCTIONS:
1. Cr√©e entre 10 et 15 tweets maximum
2. Chaque tweet doit faire moins de 200 caract√®res (incluant les espaces)
3. Reprends le contenu, le ton et le style de la transcription
4. Adapte le contenu pour Twitter/X
5. Utilise des hashtags pertinents (2-3 par tweet maximum)
6. Varie les approches: questions, citations, conseils, insights, etc.
7. Garde le ton professionnel mais accessible
8. √âvite les r√©p√©titions entre les tweets

FORMAT DE R√âPONSE:
Retourne uniquement un tableau JSON avec cette structure:
[
  {
    "content": "Contenu du tweet avec moins de 200 caract√®res",
    "hashtags": ["hashtag1", "hashtag2"]
  }
]

Assure-toi que le JSON soit valide et que chaque tweet respecte la limite de caract√®res.`

    console.log(`ü§ñ Appel de Claude avec le prompt...`)

    // Appeler Claude
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4000,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    })

    console.log(`‚úÖ R√©ponse re√ßue de Claude`)

    const content = response.content[0]
    if (content.type !== 'text') {
      throw new Error('R√©ponse invalide de Claude: type non-text')
    }

    console.log(`üìÑ R√©ponse brute de Claude:`, content.text.substring(0, 500) + '...')

    // Parser la r√©ponse JSON
    let tweets
    try {
      // Extraire le JSON de la r√©ponse
      const jsonMatch = content.text.match(/\[[\s\S]*\]/)
      if (!jsonMatch) {
        console.error('‚ùå Aucun JSON trouv√© dans la r√©ponse')
        console.error('R√©ponse compl√®te:', content.text)
        throw new Error('Format de r√©ponse invalide: aucun JSON trouv√©')
      }
      
      const jsonString = jsonMatch[0]
      console.log(`üîç JSON extrait:`, jsonString.substring(0, 300) + '...')
      
      tweets = JSON.parse(jsonString)
      
      // Validation des tweets
      if (!Array.isArray(tweets)) {
        throw new Error('Format de tweets invalide: pas un tableau')
      }

      console.log(`‚úÖ ${tweets.length} tweets pars√©s avec succ√®s`)

      tweets = tweets.map((tweet, index) => {
        if (!tweet.content || !tweet.hashtags) {
          throw new Error(`Tweet ${index + 1}: structure invalide (content ou hashtags manquants)`)
        }
        
        // V√©rifier la limite de caract√®res
        if (tweet.content.length > 200) {
          throw new Error(`Tweet ${index + 1} trop long: ${tweet.content.length} caract√®res`)
        }
        
        return {
          content: tweet.content,
          hashtags: Array.isArray(tweet.hashtags) ? tweet.hashtags : [tweet.hashtags]
        }
      })

      console.log(`‚úÖ Validation des tweets termin√©e`)

    } catch (parseError) {
      console.error('‚ùå Erreur de parsing:', parseError)
      console.error('R√©ponse brute de Claude:', content.text)
      throw new Error(`Erreur lors du parsing de la r√©ponse: ${parseError instanceof Error ? parseError.message : 'Erreur inconnue'}`)
    }

    return NextResponse.json({ tweets })

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des tweets:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Erreur lors de la g√©n√©ration des tweets' },
      { status: 500 }
    )
  }
}
