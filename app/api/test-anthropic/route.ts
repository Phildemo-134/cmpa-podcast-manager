import { NextRequest, NextResponse } from 'next/server'
import Anthropic from '@anthropic-ai/sdk'

export async function GET(request: NextRequest) {
  try {
    console.log('üß™ Test de configuration Anthropic...')
    
    // V√©rifier que la cl√© API est configur√©e
    const apiKey = process.env.ANTHROPIC_API_KEY
    if (!apiKey) {
      throw new Error('‚ùå ANTHROPIC_API_KEY n\'est pas d√©finie')
    }
    
    if (apiKey === 'your_anthropic_api_key' || apiKey === '') {
      throw new Error('‚ùå ANTHROPIC_API_KEY n\'est pas correctement configur√©e')
    }
    
    console.log('‚úÖ Cl√© API Anthropic configur√©e')
    console.log(`üìù Cl√© API: ${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`)
    
    // Cr√©er une instance Anthropic
    const anthropic = new Anthropic({
      apiKey: apiKey,
    })
    
    // Test simple avec Claude
    console.log('ü§ñ Test d\'appel √† Claude...')
    
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 100,
      messages: [
        {
          role: 'user',
          content: 'R√©ponds simplement "Test r√©ussi" en fran√ßais.'
        }
      ]
    })
    
    const content = response.content[0]
    if (content.type !== 'text') {
      throw new Error('‚ùå R√©ponse invalide de Claude')
    }
    
    console.log('‚úÖ Test d\'appel √† Claude r√©ussi')
    console.log(`üìÑ R√©ponse: ${content.text}`)
    
    return NextResponse.json({
      success: true,
      message: 'Configuration Anthropic valide',
      testResponse: content.text,
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de configuration Anthropic:', error)
    return NextResponse.json({
      success: false,
      error: 'Erreur lors du test de configuration Anthropic',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { prompt } = body
    
    if (!prompt) {
      return NextResponse.json({
        success: false,
        error: 'Prompt requis pour le test'
      }, { status: 400 })
    }
    
    console.log('üß™ Test de g√©n√©ration avec Anthropic...')
    
    // V√©rifier la configuration
    const apiKey = process.env.ANTHROPIC_API_KEY
    if (!apiKey || apiKey === 'your_anthropic_api_key' || apiKey === '') {
      throw new Error('ANTHROPIC_API_KEY non configur√©e')
    }
    
    const anthropic = new Anthropic({
      apiKey: apiKey,
    })
    
    // Test avec le prompt fourni
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 500,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    })
    
    const content = response.content[0]
    if (content.type !== 'text') {
      throw new Error('R√©ponse invalide de Claude')
    }
    
    return NextResponse.json({
      success: true,
      message: 'Test de g√©n√©ration r√©ussi',
      response: content.text,
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de g√©n√©ration:', error)
    return NextResponse.json({
      success: false,
      error: 'Erreur lors du test de g√©n√©ration',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}
