import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { Database } from '../../../../types/database'

const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

// Configuration Twitter (√† remplacer par vos vraies cl√©s)
const TWITTER_CONFIG = {
  apiKey: process.env.TWITTER_API_KEY || 'test_key',
  apiSecret: process.env.TWITTER_API_SECRET || 'test_secret',
  accessToken: process.env.TWITTER_ACCESS_TOKEN || 'test_token',
  accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET || 'test_secret'
}

/**
 * Publie un tweet sur Twitter via notre API
 */
async function publishTweetToTwitter(tweet: any) {
  console.log(`üê¶ Publication du tweet: "${tweet.content}"`)
  
  try {
    // Appeler notre API Twitter pour tweets planifi√©s
    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/social/twitter/post-scheduled`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        content: tweet.content,
        userId: tweet.user_id
      })
    })
    
    if (!response.ok) {
      const errorData = await response.json()
      throw new Error(`Erreur API Twitter: ${errorData.error || response.statusText}`)
    }
    
    const result = await response.json()
    console.log(`‚úÖ Tweet publi√© avec succ√®s sur Twitter`)
    console.log(`   Tweet ID: ${result.tweetId || 'N/A'}`)
    
    return { 
      success: true, 
      tweetId: result.tweetId || `local_${Date.now()}` 
    }
    
  } catch (error) {
    console.error(`‚ùå √âchec de la publication sur Twitter: ${error instanceof Error ? error.message : 'Erreur inconnue'}`)
    throw error
  }
}

/**
 * R√©cup√®re tous les tweets planifi√©s √† publier maintenant
 */
async function getTweetsToPublish() {
  const now = new Date()
  const currentDate = now.toISOString().split('T')[0]
  const currentTime = now.toTimeString().slice(0, 5)
  
  console.log(`üîç Recherche des tweets √† publier le ${currentDate} √† ${currentTime}`)
  
  try {
    const { data: tweets, error } = await supabase
      .from('scheduled_tweets')
      .select('*')
      .eq('status', 'pending')
      .lte('scheduled_date', currentDate)
      .lte('scheduled_time', currentTime)
      .order('scheduled_date', { ascending: true })
      .order('scheduled_time', { ascending: true })
    
    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des tweets:', error)
      return []
    }
    
    console.log(`üìã ${tweets.length} tweet(s) trouv√©(s) √† publier`)
    return tweets || []
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des tweets:', error)
    return []
  }
}

/**
 * Traite un tweet planifi√© : publication + mise √† jour du statut
 */
async function processTweet(tweet: any) {
  console.log(`üöÄ Publication du tweet ID: ${tweet.id}`)
  console.log(`üìù Contenu: ${tweet.content}`)
  console.log(`üìÖ Planifi√© pour: ${tweet.scheduled_date} √† ${tweet.scheduled_time}`)
  
  try {
    // Publier le tweet sur Twitter
    const publishResult = await publishTweetToTwitter(tweet)
    
    if (publishResult.success) {
      // Mettre √† jour le statut en base
      const { error: updateError } = await supabase
        .from('scheduled_tweets')
        .update({ 
          status: 'published',
          published_at: new Date().toISOString(),
          twitter_id: publishResult.tweetId
        })
        .eq('id', tweet.id)
      
      if (updateError) {
        console.error('‚ùå Erreur lors de la mise √† jour du statut:', updateError)
        throw updateError
      }
      
      console.log(`‚úÖ Statut mis √† jour: published`)
      return { success: true, tweetId: publishResult.tweetId }
    }
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement du tweet ${tweet.id}:`, error)
    
    // Marquer le tweet comme √©chou√©
    try {
      await supabase
        .from('scheduled_tweets')
        .update({ 
          status: 'failed',
          error_message: error instanceof Error ? error.message : 'Erreur inconnue'
        })
        .eq('id', tweet.id)
    } catch (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour du statut d\'erreur:', updateError)
    }
    
    return { success: false, error: error instanceof Error ? error.message : 'Erreur inconnue' }
  }
}

/**
 * Fonction principale du cron job
 */
async function runScheduler() {
  console.log(`‚è∞ [${new Date().toLocaleDateString('fr-FR')}, ${new Date().toLocaleTimeString('fr-FR')}] D√©marrage du planificateur de tweets`)
  console.log('============================================================')
  
  try {
    // R√©cup√©rer les tweets √† publier
    const tweetsToPublish = await getTweetsToPublish()
    
    if (tweetsToPublish.length === 0) {
      console.log('‚ú® Aucun tweet √† publier pour le moment')
      return
    }
    
    // Traiter chaque tweet
    let successCount = 0
    let errorCount = 0
    
    for (const tweet of tweetsToPublish) {
      const result = await processTweet(tweet)
      
      if (result.success) {
        successCount++
      } else {
        errorCount++
      }
      
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
    }
    
    console.log(`üéâ Traitement termin√©: ${successCount} tweet(s) trait√©(s) avec succ√®s, ${errorCount} √©chec(s)`)
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale du planificateur:', error)
  }
  
  console.log('============================================================')
}

export async function GET(request: NextRequest) {
  // V√©rifier que c'est bien Vercel qui appelle (optionnel mais recommand√©)
  const authHeader = request.headers.get('authorization')
  
  if (process.env.NODE_ENV === 'production' && authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
    return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 })
  }
  
  try {
    await runScheduler()
    return NextResponse.json({ 
      success: true, 
      message: 'Cron job ex√©cut√© avec succ√®s',
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du cron job:', error)
    return NextResponse.json({ 
      error: 'Erreur lors de l\'ex√©cution du cron job',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}
